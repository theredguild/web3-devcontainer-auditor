#!/bin/bash

# Security Auditor Environment Setup
# Read-only security analysis environment

set -euo pipefail

# Audit logging function
audit_log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] AUDIT: $*" | tee -a /var/log/audit-setup.log
}

audit_log "🔍 Initializing security audit environment..."

# Verify we're in audit mode
if [[ "${AUDIT_MODE:-}" != "true" ]]; then
    audit_log "❌ Not in audit mode, setup aborted"
    exit 1
fi

# Show environment status
audit_log "✅ Read-only mode: ${READ_ONLY_MODE:-false}"
audit_log "✅ Network disabled: ${NO_NETWORK_WRITE:-false}"

# Create audit workspace structure
audit_log "📁 Setting up audit workspace structure..."
mkdir -p /tmp/audit-reports/{static-analysis,symbolic-execution,visual-analysis,metrics}
mkdir -p /tmp/audit-tools/{slither,mythril,manticore,surya}

# Create audit analysis templates
audit_log "📝 Creating audit report templates..."

# Static Analysis Report Template
cat > /tmp/audit-reports/static-analysis-template.md << 'EOF'
# 🔍 Static Analysis Report

**Contract:** `[CONTRACT_NAME]`  
**Auditor:** `[AUDITOR_NAME]`  
**Date:** `[DATE]`  
**Tools Used:** Slither, Solhint, Custom Analysis

## 📊 Executive Summary

| Metric | Count | Severity |
|--------|-------|----------|
| Critical Issues | 0 | 🔴 |
| High Issues | 0 | 🟠 |
| Medium Issues | 0 | 🟡 |
| Low Issues | 0 | 🔵 |
| Informational | 0 | ⚪ |

## 🔍 Detailed Findings

### Critical Issues
[None found / List critical issues]

### High Severity Issues  
[None found / List high severity issues]

### Medium Severity Issues
[None found / List medium severity issues]

### Low Severity Issues
[None found / List low severity issues]

### Informational Findings
[List informational findings]

## 📈 Code Quality Metrics

- **Lines of Code:** [NUMBER]
- **Function Count:** [NUMBER]
- **Cyclomatic Complexity:** [SCORE]
- **Test Coverage:** [PERCENTAGE]

## ✅ Recommendations

1. [Recommendation 1]
2. [Recommendation 2]
3. [Recommendation 3]

## 🧪 Testing Recommendations

- [ ] Add unit tests for critical functions
- [ ] Implement fuzzing tests
- [ ] Add integration tests
- [ ] Verify gas optimization

---
*Report generated in read-only audit environment*
EOF

# Symbolic Execution Report Template
cat > /tmp/audit-reports/symbolic-execution-template.md << 'EOF'
# 🧠 Symbolic Execution Report

**Contract:** `[CONTRACT_NAME]`  
**Tool:** Mythril  
**Analysis Date:** `[DATE]`

## 🎯 Analysis Summary

| Check Type | Status | Issues Found |
|------------|--------|--------------|
| Integer Overflow | ✅/❌ | [COUNT] |
| Reentrancy | ✅/❌ | [COUNT] |
| Access Control | ✅/❌ | [COUNT] |
| Timestamp Dependence | ✅/❌ | [COUNT] |
| Unchecked Send | ✅/❌ | [COUNT] |

## 🔍 Detailed Analysis

### Vulnerability Assessment
[Detailed findings from symbolic execution]

### Execution Paths Analyzed
- **Total Paths:** [NUMBER]
- **Completed Paths:** [NUMBER]
- **Timeout Paths:** [NUMBER]

### Critical Findings
[List any critical vulnerabilities found]

## 📊 Recommendations

1. [Security recommendation 1]
2. [Security recommendation 2]
3. [Security recommendation 3]

---
*Generated by Mythril symbolic execution engine*
EOF

# Create audit workflow guide
cat > /tmp/audit-reports/AUDIT-WORKFLOW.md << 'EOF'
# 🔍 Security Audit Workflow

## 📋 Pre-Analysis Checklist

- [ ] Contract source code obtained
- [ ] Compilation successful  
- [ ] Dependencies identified
- [ ] Documentation reviewed
- [ ] Test suite examined

## 🔧 Analysis Tools Workflow

### 1. Static Analysis (Slither)
```bash
# Basic analysis
slither . --print human-summary

# Detailed analysis with all detectors
slither . --detect all --format json > /tmp/audit-reports/slither-report.json

# Generate inheritance graph
slither . --print inheritance-graph

# Check for specific vulnerabilities
slither . --detect reentrancy-eth,uninitialized-state,arbitrary-send
```

### 2. Symbolic Execution (Mythril)
```bash
# Basic symbolic execution
myth analyze contract.sol

# Deep analysis with custom timeout
myth analyze contract.sol --execution-timeout 300

# Generate report
myth analyze contract.sol --format json > /tmp/audit-reports/mythril-report.json
```

### 3. Visual Analysis (Surya)
```bash
# Generate inheritance tree
surya inheritance contract.sol | dot -Tpng > /tmp/audit-reports/inheritance.png

# Function call graph
surya graph contract.sol | dot -Tpng > /tmp/audit-reports/call-graph.png

# Dependencies
surya dependencies contract.sol
```

### 4. Code Metrics
```bash
# Generate detailed metrics
surya describe contract.sol > /tmp/audit-reports/metrics.txt

# Solidity linting
solhint contract.sol > /tmp/audit-reports/linting.txt
```

## 📊 Report Generation

1. **Combine findings** from all tools
2. **Prioritize vulnerabilities** by severity
3. **Verify findings** manually
4. **Document recommendations**
5. **Create executive summary**

## 🚨 Critical Issues to Check

- [ ] Reentrancy vulnerabilities
- [ ] Integer overflow/underflow
- [ ] Access control bypasses
- [ ] Timestamp manipulation
- [ ] Front-running possibilities
- [ ] Gas optimization issues
- [ ] Unchecked external calls
- [ ] State variable shadowing

## 📝 Documentation Requirements

- Detailed vulnerability descriptions
- Proof of concept exploits
- Remediation recommendations
- Risk assessment scores
- Code quality metrics

---
*Follow this workflow for comprehensive security analysis*
EOF

# Set up analysis shortcuts
audit_log "⚙️ Setting up analysis shortcuts..."

# Create quick analysis script
cat > /tmp/audit-tools/quick-analysis.sh << 'EOF'
#!/bin/bash
# Quick security analysis script

echo "🔍 Starting comprehensive security analysis..."

# Check if Solidity files exist
if ! find . -name "*.sol" -type f | head -1 | grep -q .; then
    echo "❌ No Solidity files found in current directory"
    exit 1
fi

echo "📊 Running Slither static analysis..."
slither . --print human-summary 2>/dev/null || echo "⚠️ Slither analysis had issues"

echo "🧠 Running basic Mythril analysis..."
for contract in $(find . -name "*.sol" -type f | head -3); do
    echo "  Analyzing: $contract"
    myth analyze "$contract" --execution-timeout 60 2>/dev/null || echo "  ⚠️ Mythril timeout on $contract"
done

echo "📈 Generating code metrics..."
surya describe $(find . -name "*.sol" -type f | head -5) 2>/dev/null || echo "⚠️ Surya metrics unavailable"

echo "✅ Quick analysis complete!"
echo "📁 Check /tmp/audit-reports/ for detailed reports"
EOF

chmod +x /tmp/audit-tools/quick-analysis.sh

# Show available tools
audit_log "🛠️ Verifying analysis tools..."
echo "Available Security Analysis Tools:"
echo "  🔍 Slither: $(slither --version 2>/dev/null || echo 'Not available')"
echo "  🧠 Mythril: $(myth version 2>/dev/null || echo 'Not available')"  
echo "  📊 Surya: $(surya --version 2>/dev/null || echo 'Not available')"
echo "  🔧 Solhint: $(solhint --version 2>/dev/null || echo 'Not available')"
echo "  ⚡ Echidna: $(echidna --version 2>/dev/null || echo 'Not available')"

# Create desktop shortcuts for VS Code
audit_log "🎨 Setting up VS Code analysis shortcuts..."
mkdir -p /home/auditor/.vscode
cat > /home/auditor/.vscode/tasks.json << 'EOF'
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "🔍 Run Slither Analysis",
            "type": "shell",
            "command": "slither",
            "args": [".", "--print", "human-summary"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            }
        },
        {
            "label": "🧠 Run Mythril Analysis",
            "type": "shell",
            "command": "myth",
            "args": ["analyze", "${file}"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            }
        },
        {
            "label": "📊 Generate Metrics",
            "type": "shell",
            "command": "surya",
            "args": ["describe", "${file}"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            }
        }
    ]
}
EOF

# Final audit environment verification
audit_log "✅ Security audit environment setup complete!"

# Show audit reminder
/home/auditor/audit-reminder.sh

echo ""
echo "┌─────────────────────────────────────────────┐"
echo "│  🔍 SECURITY AUDIT ENVIRONMENT READY       │"
echo "├─────────────────────────────────────────────┤"
echo "│  📊 Run '/tmp/audit-tools/quick-analysis.sh'│"
echo "│  📝 Use templates in /tmp/audit-reports/   │"
echo "│  🛠️ VS Code tasks available (Ctrl+Shift+P) │"
echo "│  ⚠️  READ-ONLY MODE - Analysis only        │"
echo "└─────────────────────────────────────────────┘"
echo ""

audit_log "🎉 Audit environment initialization complete!"